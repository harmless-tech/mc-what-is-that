plugins {
	id "fabric-loom" version "1.5-SNAPSHOT"

	id "maven-publish"
	id "com.modrinth.minotaur" version "2.+"

	id "com.diffplug.spotless" version "6.25.0"
	id "com.github.spotbugs" version "6.0.8"
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name + "-fabric"
}

repositories {
	maven {
		name "ParchmentMC"
		url "https://maven.parchmentmc.org"
	}
	maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"
	}
	//	maven {
	//		name "JitPack"
	//		url "https://jitpack.io"
	//	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"what-was-that" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	mappings loom.layered() {
		officialMojangMappings()
		parchment "org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_mappings}@zip"
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	// TODO: Use subset of fabric api. (https://github.com/FabricMC/fabric-example-mod/issues/175)

	include modImplementation("maven.modrinth:midnightlib:${project.midnightlib_version}")

	compileOnly "org.jetbrains:annotations:24.1.0"

	spotbugs "com.github.spotbugs:spotbugs:${spotbugs.toolVersion.get()}"
	spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0"
	spotbugsPlugins "com.mebigfatguy.sb-contrib:sb-contrib:7.6.4"

	// Test mods
	modLocalRuntime "maven.modrinth:sodium:mc1.20.4-0.5.8"
	modLocalRuntime "maven.modrinth:lithium:mc1.20.4-0.12.1"
	modLocalRuntime "maven.modrinth:lazydfu:0.1.3"
	modLocalRuntime "maven.modrinth:modmenu:9.0.0"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

build {
	dependsOn spotlessApply
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/harmless-tech/mc-what-is-that"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

spotbugs {
	showProgress = true
	excludeFilter = file("spotbugs-exclude.xml")
}

spotbugsMain {
	reports {
		html {
			enabled = true
			stylesheet = "fancy-hist.xsl"
		}
	}
}

spotbugsClient {
	reports {
		html {
			enabled = true
			stylesheet = "fancy-hist.xsl"
		}
	}
}

spotless {
	java {
		target "src/*/java/**"
		removeUnusedImports()
		importOrder()
		palantirJavaFormat()
		formatAnnotations()
	}
	groovy {
		target "*.gradle"
		importOrder()
		removeSemicolons()
		greclipse()
	}
	json {
		target "src/**/assets/**/*.json", "src/**/data/**/*.json"
		jackson().feature('ORDER_MAP_ENTRIES_BY_KEYS', true)
	}
	format "xml", {
		target "*.xml"
		eclipseWtp("xml")
	}
}
